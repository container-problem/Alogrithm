using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Algorithm
{
    class Program
    {
        public static int n;
        public static int M;
        public static int[] masses;

        public static StreamWriter sw;

        public static void Read(string path)
        {
            try
            {
                string[] strArray;
                using (StreamReader sr = new StreamReader(path))
                {
                    strArray = sr.ReadLine().Split(' ');
                    n = Convert.ToInt32(strArray[0]);
                    M = Convert.ToInt32(strArray[1]);
                    masses = new int[n];
                    strArray = sr.ReadLine().Split(' ');
                    for (int i = 0; i < n; i++)
                    {
                        masses[i] = Convert.ToInt32(strArray[i]);
                    }

                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Ошибка при чтении файла: \n" + e.Message);
                throw e;
            }
        }

        static void PrintLn(string message = "")
        {
            Console.WriteLine(message);
            sw.WriteLine(message);
        }

        static void PrintSolution(List<List<int>> solution) 
        {
            for (int i = 0; i < solution.Count(); i++)
            {
                PrintLn($"#{i + 1}: " + string.Join(" ", solution[i]));
            }

            PrintLn();

        }

        static void Main(string[] args)
        {
            sw = new StreamWriter("output.txt");

            Console.WriteLine("How to preapare your input file: ");
            Console.WriteLine("In the first row of your input write n space m, where n - is number of elements and m - max mass of all elements in one container");
            Console.WriteLine("In the second row of you input file write all elements splitted by space. ");
            Console.WriteLine();

            Console.WriteLine("There is an example:");
            Console.WriteLine("5 13");
            Console.WriteLine("1 2 3 4 5");
            Console.WriteLine();

            Console.WriteLine("leave input empty to generate input automaticaly (n, m and elements will be generated by Random)");
            Console.Write("Read input file path (example: input.txt): ");
            var input = Console.ReadLine();

            if (string.IsNullOrEmpty(input))
            {
                var r = new Random();
                n = r.Next(1, 10);
                M = r.Next(1, 100);

                for(int i = 0; i < n; i++)
                {
                    masses[i] = r.Next(1, M);
                }

                PrintLn("Generated: ");
                PrintLn($"n = {n}, m = {M}:: " + string.Join(" ", masses));
            }
            else
            {
                Read(input);
            }

            Console.WriteLine();

            Console.Write("Write the number of tests you want do (the bigger, the better, but the longer): ");
            var count = int.Parse(Console.ReadLine());
            Console.WriteLine();


            var localMass = new int[n];
            DateTime start = DateTime.Now;
            for (int k = 0; k < count; k++)
            { 
                for (int i = 0; i < n; i++)
                {
                    localMass[i] = masses[i];
                }

                Algorithms.ExactAlg(n, M, localMass);
            }

            DateTime end = DateTime.Now;
            TimeSpan Sum = end - start;

            var exactTotal = Sum.TotalMilliseconds / count;

            PrintLn("Exact solution: ");
            for (int i = 0; i < n; i++)
            {
                localMass[i] = masses[i];
            }
            var exactSolution = Algorithms.ExactAlg(n, M, localMass);
            PrintSolution(exactSolution);


            start = DateTime.Now;
            for (int k = 0; k < count; k++)
            {
                for (int i = 0; i < n; i++)
                {
                    localMass[i] = masses[i];
                }
                Algorithms.FFAlg(n, M, masses);
            }

            end = DateTime.Now;
            Sum = end - start;

            var FFTotal = Sum.TotalMilliseconds / count;

            PrintLn("FF solution: ");
            for (int i = 0; i < n; i++)
            {
                localMass[i] = masses[i];
            }
            var ffSolution = Algorithms.FFAlg(n, M, localMass);
            PrintSolution(ffSolution);


            start = DateTime.Now;
            for (int k = 0; k < count; k++)
            {
                for (int i = 0; i < n; i++)
                {
                    localMass[i] = masses[i];
                }
                Algorithms.FFSAlg(n, M, masses.ToArray());
            }
            end = DateTime.Now;
            Sum = end - start;

            var FFSTotal = Sum.TotalMilliseconds / count;


            PrintLn("FFS solution: ");
            for (int i = 0; i < n; i++)
            {
                localMass[i] = masses[i];
            }
            var ffsSolution = Algorithms.FFSAlg(n, M, localMass);
            PrintSolution(ffsSolution);

            PrintLn($"Average time for exact algorithm: {exactTotal}");
            PrintLn($"Average time for FF algorithm: {FFTotal}");
            PrintLn($"Average time for FFS algorithm: {FFSTotal}");
        }

    }

        /*
       
        */

        /*
        static void Main(string[] args)
        {
            
            
            var random = new Random();

            Console.Write("Read from file = ");
            bool readFromFile = bool.Parse(Console.ReadLine());
            var input = "";
            if(readFromFile)
            {
                Console.Write("Input file path = ");
                input = Console.ReadLine();
                Read(input);
            }

            M = 100;
            int N = readFromFile ? n : 12;
            for (int i = 1; i < N; i++)
            {
                if(!readFromFile) 
                {
                    n = i;
                    masses = new int[n];
                }

                Console.WriteLine($"For N = {n}");

                double mediumDeviationFF = 0;
                double mediumDeviationFFS = 0;
                for (int k = 0; k < 100; k++)
                {
                    if(!readFromFile)
                    {
                        for (int j = 0; j < n; j++)
                        {
                            masses[j] = random.Next(1, M);
                        }
                    }
                    

                    double exactSolution = F(Algorithms.ExactAlg(n, M, masses));
                    double FFSolution = F(Algorithms.FFAlg(n, M, masses));
                    double FFSSolution = F(Algorithms.FFSAlg(n, M, masses));

                    mediumDeviationFF = exactSolution * 1.7 - FFSolution;
                    mediumDeviationFFS = 11.0 / 9.0 * exactSolution + 1 - FFSSolution;

                    if (mediumDeviationFF < 0)
                    {
                        Console.WriteLine("FF вышел за пределы");
                    }

                    if (mediumDeviationFFS < 0)
                    {
                        Console.WriteLine("FFS вышел за пределы");
                    }
                }
            }

            Console.ReadKey();
        }

        private static double F(List<List<int>> solution)
        {
            return solution.Count();
        }
        
        */

        
        /*
        //Оценка времени выполнения
        static void Main(string[] args)
        {
            Console.Write("Read from file = ");
            bool readFromFile = bool.Parse(Console.ReadLine());

            M = 100;
            

            if (readFromFile)
            {
                Console.Write("Input file path = ");
                string input = Console.ReadLine();
                Read(input);
            }

            int N = readFromFile ? n : 12;

            using (var sw = new StreamWriter("output.txt"))
            {
                

                var random = new Random();
                for (int i = 1; i < N; i++)
                {
                    if(!readFromFile)
                    {
                        n = i;
                        masses = new int[n];
                    }

                    Console.WriteLine($"For N = {n}");
                    
                    TimeSpan Sum = TimeSpan.Zero;
                    
                    for (int k = 0; k < 100; k++)
                    {
                        if(!readFromFile)
                        {
                            for (int j = 0; j < n; j++)
                            {
                                masses[j] = random.Next(1, M);
                            }
                        }
                        

                        DateTime start = DateTime.Now;
                        Algorithms.ExactAlg(n, M, masses);
                        DateTime end = DateTime.Now;
                        Sum += end - start;
                    }

                    Console.WriteLine($"Time for exact algorithm: {(Sum / 100).TotalMilliseconds}");
                    
                    //Sum = TimeSpan.Zero;
                    for (int k = 0; k < 1000000; k++)
                    {
                        if (!readFromFile)
                        {
                            for (int j = 0; j < n; j++)
                            {
                                masses[j] = random.Next(1, M);
                            }
                        }

                        DateTime start = DateTime.Now;
                        Algorithms.FFAlg(n, M, masses);
                        DateTime end = DateTime.Now;
                        Sum += end - start;
                    }


                    string line = $"{n},{(Sum).TotalMilliseconds / 1000000}";



                    Sum = TimeSpan.Zero;
                    for (int k = 0; k < 1000000; k++)
                    {
                        if (!readFromFile)
                        {
                            for (int j = 0; j < n; j++)
                            {
                                masses[j] = random.Next(1, M);
                            }
                        }

                        DateTime start = DateTime.Now;
                        Algorithms.FFSAlg(n, M, masses);
                        DateTime end = DateTime.Now;
                        Sum += end - start;
                    }

                    line += $",{(Sum).TotalMilliseconds / 1000000} ";

                    sw.WriteLine(line);
                }

            }
            Console.ReadKey();
        }
    */
}
